#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  Author: Adrian Böckenkamp
# License: BSD (https://opensource.org/licenses/BSD-3-Clause)
#    Date: 13/04/2018

import Pyro4
import socket
import Pyro4.naming
import getpass
import os
import inspect
import sys
import roslaunch2

__version__ = '0.1'


class Server:
    """
    This class represents the roslaunch2 server required to be launched on remote computers that should run
    nodes remotely using roslaunch2.
    """
    def __init__(self):
        """
        Initializes the server (it does not start it right away). It also tests whether a PyRO name server is running.
        """
        self.machine_address = Server.get_ip_address()
        self.reg_db = {}
        roslaunch2.logger.log('This is the roslaunch2 PyRO server v{:s}, '
                              '(C) Copyright by Adrian Böckenkamp 2018.\n'.format(__version__))
        Pyro4.config.REQUIRE_EXPOSE = True

        if not Server.is_name_server_running():
            roslaunch2.logger.critical("cannot find a running PyRO name server, please start it with:\n"
                                       "  $ python -m Pyro4.naming -n $(hostname -I | grep -o '^\S*')\n")
        else:
            roslaunch2.logger.log('- Name server found.')

        self.daemon = Pyro4.Daemon(self.machine_address)  # make a Pyro daemon (NOT on the localhost)
        roslaunch2.logger.log('- Started daemon on {:s}.'.format(self.machine_address))
        self.ns = Pyro4.locateNS()  # find the name server

        self.register_remote_class(roslaunch2.package.Package)
        self.register_remote_class(roslaunch2.remote.API)
        self.register_remote_class(roslaunch2.remote.Internals)

        # Load custom plugins (if any):
        plugin_dir = os.environ['ROSLAUNCH2_PLUGINS'] if 'ROSLAUNCH2_PLUGINS' in os.environ else None
        plugin_count = 0
        if plugin_dir and os.path.exists(plugin_dir):
            # Hot-patch PYTHONPATH to find . imports:
            if plugin_dir not in sys.path:
                sys.path.append(plugin_dir)
            roslaunch2.logger.log("- Loading plugins from {:s} ...".format(plugin_dir))
            for file in os.listdir(plugin_dir):
                if file.endswith(".py"):
                    module = roslaunch2.Package.import_launch_module(os.path.join(plugin_dir, file))
                    # Get all classes from the module:
                    clsmembers = inspect.getmembers(module, inspect.isclass)
                    for cls in clsmembers:
                        self.register_remote_class(cls[1])
                    plugin_count += len(clsmembers)
        elif plugin_dir and not os.path.exists(plugin_dir):
            roslaunch2.logger.warning('cannot find plugin directory {:s}'.format(plugin_dir))

        roslaunch2.logger.log('- Registered the following types on this machine ({:d} plugin(s)):'.format(plugin_count))
        for k in self.reg_db:
            roslaunch2.logger.log('  * {:s} -> {:s}'.format(str(k), str(self.reg_db[k])))

    @staticmethod
    def is_name_server_running():
        """
        Tests whether the PyRO name server can be found.

        :return: True if started, False otherwise
        """
        with Pyro4.Proxy("PYRONAME:Pyro.NameServer") as p:
            try:
                p._pyroBind()
                return True
            except Pyro4.errors.PyroError:
                return False

    @staticmethod
    def get_ip_address():
        """
        Returns the IP address of the primary network adapter having internet access. This is used to bound the server.
        (By using localhost, others cannot connect to the server.)

        :return:
        """
        # http://stackoverflow.com/questions/24196932/how-can-i-get-the-ip-address-of-eth0-in-python
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        return str(s.getsockname()[0])

    def register_remote_class(self, cls):
        """
        Registers the given Python class at the PyRO server, making it available remotely.

        :param cls: Fully qualified type to register
        :return: always None
        """
        name = self.machine_address + '.' + getpass.getuser() + '.' + str(cls)
        uri = self.daemon.register(cls)
        self.ns.register(name, uri)
        self.reg_db[name] = uri

    def main(self):
        """
        Starts the server by entering its main request processing loop.

        :return: always None
        """
        roslaunch2.logger.log('\nReady, entering request processing loop.')
        self.daemon.requestLoop()  # start the event loop of the server to wait for calls
        pass


if __name__ == "__main__":
    rl2s = Server()
    rl2s.main()
